---
const skills = [
  {
    category: 'Frontend',
    items: [
      { name: 'JavaScript', level: 'expert' },
      { name: 'TypeScript', level: 'expert' },
      { name: 'React', level: 'expert' },
      { name: 'Next.js', level: 'expert' },
      { name: 'Vue.js', level: 'intermediate' },
      { name: 'Nuxt.js', level: 'intermediate' },
    ]
  },
  {
    category: 'Backend',
    items: [
      { name: 'Go', level: 'expert' },
      { name: 'Python', level: 'expert' },
      { name: 'Java', level: 'expert' },
      { name: 'Node.js', level: 'expert' },
      { name: 'Ruby (Rails)', level: 'expert' },
      { name: 'PHP', level: 'intermediate' },
    ]
  },
  {
    category: 'Database',
    items: [
      { name: 'PostgreSQL', level: 'expert' },
      { name: 'MySQL', level: 'expert' },
      { name: 'MongoDB', level: 'expert' },
      { name: 'Redis', level: 'expert' },
      { name: 'Cloud Datastore', level: 'expert' },
    ]
  },
  {
    category: 'Cloud',
    items: [
      { name: 'GCP', level: 'expert' },
      { name: 'AWS', level: 'intermediate' },
      { name: 'Firebase', level: 'expert' },
      { name: 'Supabase', level: 'expert' },
      { name: 'Vercel', level: 'expert' },
      { name: 'Cloudflare', level: 'intermediate' },
    ]
  },
  {
    category: 'AI',
    items: [
      { name: 'Vertex AI', level: 'intermediate' },
      { name: 'Claude', level: 'expert' },
      { name: 'OpenAI', level: 'expert' },
      { name: 'Gemini', level: 'intermediate' },
      { name: 'GitHub Copilot', level: 'expert' },
    ]
  },
  {
    category: 'DevOps',
    items: [
      { name: 'Docker', level: 'expert' },
      { name: 'Kubernetes', level: 'intermediate' },
      { name: 'CI/CD', level: 'expert' },
      { name: 'Cloud Build', level: 'expert' },
      { name: 'GitHub Actions', level: 'expert' },
    ]
  }
];

const getLevelColor = (level) => {
  switch(level) {
    case 'expert':
      return 'bg-primary text-white';
    case 'intermediate':
      return 'bg-accent text-white';
    default:
      return 'bg-gray-200 text-gray-700';
  }
};
---

<section id="skills" class="py-24 bg-gray-50 relative">
  <div class="container mx-auto px-6">
    <div class="text-center mb-16 reveal">
      <h2 class="text-3xl md:text-4xl font-bold mb-6">スキルセット</h2>
      <p class="text-gray-600 max-w-2xl mx-auto">
        実務および個人開発で培った技術スタックの一覧です。常に最新技術のキャッチアップを心がけています。
      </p>
      <div class="h-1 w-20 bg-primary mx-auto mt-6"></div>
    </div>

    <div class="skills-container">
      {skills.map((skillGroup) => (
        <div class="skill-group mb-12 reveal">
          <h3 class="text-xl font-bold mb-6 flex items-center">
            <span class="h-8 w-1 bg-primary mr-3"></span>
            {skillGroup.category}
          </h3>
          
          <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4">
            {skillGroup.items.map((skill) => (
              <div class={`skill-tag ${getLevelColor(skill.level)} p-3 rounded-lg shadow-md transition-all duration-300 text-center`}>
                <p class="font-medium">{skill.name}</p>
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
    
    <div class="skills-puzzle mt-16 reveal">
      <h3 class="text-xl font-bold mb-8 text-center">技術スタック概観</h3>
      
      <div class="relative h-[400px] bg-white rounded-xl shadow-lg p-6 overflow-hidden">
        <div id="skills-canvas" class="absolute inset-0"></div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const canvas = document.getElementById('skills-canvas');
    if (!canvas) return;
    
    const skills = [
      'JavaScript', 'TypeScript', 'React', 'Next.js', 'Node.js', 'Go', 'Python', 
      'Java', 'Ruby', 'PostgreSQL', 'MySQL', 'MongoDB', 'Redis', 'GCP', 'AWS', 
      'Firebase', 'Supabase', 'Vercel', 'AI', 'Docker', 'Kubernetes', 'CI/CD'
    ];
    
    // Create floating skill bubbles
    skills.forEach((skill) => {
      const el = document.createElement('div');
      el.className = 'absolute px-3 py-2 rounded-lg text-sm font-medium bg-opacity-90';
      
      // Randomize colors
      const colorClasses = [
        'bg-primary text-white',
        'bg-secondary text-white',
        'bg-accent text-white',
        'bg-white text-primary border border-primary',
        'bg-white text-secondary border border-secondary',
        'bg-white text-accent border border-accent'
      ];
      
      el.className += ' ' + colorClasses[Math.floor(Math.random() * colorClasses.length)];
      el.textContent = skill;
      
      // Random position
      const left = Math.random() * 80 + 10; // 10% to 90%
      const top = Math.random() * 80 + 10;  // 10% to 90%
      el.style.left = `${left}%`;
      el.style.top = `${top}%`;
      
      // Random animation
      const duration = 20 + Math.random() * 30; // 20-50s
      const delay = Math.random() * -30;       // -30-0s
      
      el.style.animation = `float ${duration}s ease-in-out ${delay}s infinite`;
      
      canvas.appendChild(el);
    });
  });
</script>

<style>
  .skill-tag {
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
  }
  
  .skill-tag:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
  }
  
  .skill-tag::before {
    content: '';
    position: absolute;
    top: -100%;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(to bottom, rgba(255, 255, 255, 0.2), transparent);
    transition: all 0.5s ease;
  }
  
  .skill-tag:hover::before {
    top: 0;
  }
  
  .skills-puzzle {
    perspective: 1000px;
  }
  
  @keyframes float {
    0%, 100% {
      transform: translate(0, 0);
    }
    25% {
      transform: translate(10px, 10px);
    }
    50% {
      transform: translate(20px, -5px);
    }
    75% {
      transform: translate(-10px, 5px);
    }
  }
  
  .reveal {
    opacity: 0;
    transform: translateY(20px);
    transition: all 1s ease;
  }
  
  .reveal.animate-in {
    opacity: 1;
    transform: translateY(0);
  }
</style>